{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Pari510/website/blob/main/Sentiment-Training_Epoche%3D1%3B%20Tokens%3D10_tuning.ipyn\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h_IEUaRtHA7A"
      },
      "source": [
        "# Sentiment-Analyse"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Setup and Installation"
      ],
      "metadata": {
        "id": "OpzpZI8rSWrR"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ae_BsF2HA7O",
        "outputId": "14f4c3cd-f21d-4d48-bc87-50028c0a75a5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers[torch] in /usr/local/lib/python3.10/dist-packages (4.41.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (3.14.0)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.23.2)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (24.0)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (6.0.1)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (2024.5.15)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (2.31.0)\n",
            "Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.19.1)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.4.3)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (4.66.4)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (2.3.0+cu121)\n",
            "Requirement already satisfied: accelerate>=0.21.0 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.31.0)\n",
            "Requirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from accelerate>=0.21.0->transformers[torch]) (5.9.5)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.0->transformers[torch]) (2023.6.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.0->transformers[torch]) (4.12.1)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (1.12.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (3.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (3.1.4)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (8.9.2.26)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (12.1.3.1)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (11.0.2.54)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (10.3.2.106)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (11.4.5.107)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (12.1.0.106)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.20.5 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (2.20.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (12.1.105)\n",
            "Requirement already satisfied: triton==2.3.0 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (2.3.0)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.10/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch->transformers[torch]) (12.5.40)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers[torch]) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers[torch]) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers[torch]) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers[torch]) (2024.6.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->transformers[torch]) (2.1.5)\n",
            "Requirement already satisfied: mpmath<1.4.0,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->transformers[torch]) (1.3.0)\n",
            "Requirement already satisfied: wordcloud in /usr/local/lib/python3.10/dist-packages (1.9.3)\n",
            "Requirement already satisfied: numpy>=1.6.1 in /usr/local/lib/python3.10/dist-packages (from wordcloud) (1.25.2)\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (from wordcloud) (9.4.0)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from wordcloud) (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (4.53.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (24.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->wordcloud) (1.16.0)\n",
            "Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.41.2)\n",
            "Requirement already satisfied: gradio in /usr/local/lib/python3.10/dist-packages (4.36.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.14.0)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.23.2)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.0)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.1)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.5.15)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.31.0)\n",
            "Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.19.1)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.3)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.4)\n",
            "Requirement already satisfied: aiofiles<24.0,>=22.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (23.2.1)\n",
            "Requirement already satisfied: altair<6.0,>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (4.2.2)\n",
            "Requirement already satisfied: fastapi in /usr/local/lib/python3.10/dist-packages (from gradio) (0.111.0)\n",
            "Requirement already satisfied: ffmpy in /usr/local/lib/python3.10/dist-packages (from gradio) (0.3.2)\n",
            "Requirement already satisfied: gradio-client==1.0.1 in /usr/local/lib/python3.10/dist-packages (from gradio) (1.0.1)\n",
            "Requirement already satisfied: httpx>=0.24.1 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.27.0)\n",
            "Requirement already satisfied: importlib-resources<7.0,>=1.3 in /usr/local/lib/python3.10/dist-packages (from gradio) (6.4.0)\n",
            "Requirement already satisfied: jinja2<4.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.1.4)\n",
            "Requirement already satisfied: markupsafe~=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.1.5)\n",
            "Requirement already satisfied: matplotlib~=3.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.7.1)\n",
            "Requirement already satisfied: orjson~=3.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.10.3)\n",
            "Requirement already satisfied: pandas<3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.0.3)\n",
            "Requirement already satisfied: pillow<11.0,>=8.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (9.4.0)\n",
            "Requirement already satisfied: pydantic>=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.7.3)\n",
            "Requirement already satisfied: pydub in /usr/local/lib/python3.10/dist-packages (from gradio) (0.25.1)\n",
            "Requirement already satisfied: python-multipart>=0.0.9 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.0.9)\n",
            "Requirement already satisfied: ruff>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.4.8)\n",
            "Requirement already satisfied: semantic-version~=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.10.0)\n",
            "Requirement already satisfied: tomlkit==0.12.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.12.0)\n",
            "Requirement already satisfied: typer<1.0,>=0.12 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.12.3)\n",
            "Requirement already satisfied: typing-extensions~=4.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (4.12.1)\n",
            "Requirement already satisfied: urllib3~=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.0.7)\n",
            "Requirement already satisfied: uvicorn>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.30.1)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from gradio-client==1.0.1->gradio) (2023.6.0)\n",
            "Requirement already satisfied: websockets<12.0,>=10.0 in /usr/local/lib/python3.10/dist-packages (from gradio-client==1.0.1->gradio) (11.0.3)\n",
            "Requirement already satisfied: entrypoints in /usr/local/lib/python3.10/dist-packages (from altair<6.0,>=4.2.0->gradio) (0.4)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.10/dist-packages (from altair<6.0,>=4.2.0->gradio) (4.19.2)\n",
            "Requirement already satisfied: toolz in /usr/local/lib/python3.10/dist-packages (from altair<6.0,>=4.2.0->gradio) (0.12.1)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (3.7.1)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (2024.6.2)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (1.0.5)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (3.7)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (1.3.1)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx>=0.24.1->gradio) (0.14.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->gradio) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->gradio) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->gradio) (4.53.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->gradio) (1.4.5)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->gradio) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->gradio) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2024.1)\n",
            "Requirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.0->gradio) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.18.4 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.0->gradio) (2.18.4)\n",
            "Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (8.1.7)\n",
            "Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (1.5.4)\n",
            "Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (13.7.1)\n",
            "Requirement already satisfied: starlette<0.38.0,>=0.37.2 in /usr/local/lib/python3.10/dist-packages (from fastapi->gradio) (0.37.2)\n",
            "Requirement already satisfied: fastapi-cli>=0.0.2 in /usr/local/lib/python3.10/dist-packages (from fastapi->gradio) (0.0.4)\n",
            "Requirement already satisfied: ujson!=4.0.2,!=4.1.0,!=4.2.0,!=4.3.0,!=5.0.0,!=5.1.0,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from fastapi->gradio) (5.10.0)\n",
            "Requirement already satisfied: email_validator>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from fastapi->gradio) (2.1.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.3.2)\n",
            "Requirement already satisfied: dnspython>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from email_validator>=2.0.0->fastapi->gradio) (2.6.1)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6.0,>=4.2.0->gradio) (23.2.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6.0,>=4.2.0->gradio) (2023.12.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6.0,>=4.2.0->gradio) (0.35.1)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6.0,>=4.2.0->gradio) (0.18.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib~=3.0->gradio) (1.16.0)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (2.16.1)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio->httpx>=0.24.1->gradio) (1.2.1)\n",
            "Requirement already satisfied: httptools>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from uvicorn>=0.14.0->gradio) (0.6.1)\n",
            "Requirement already satisfied: python-dotenv>=0.13 in /usr/local/lib/python3.10/dist-packages (from uvicorn>=0.14.0->gradio) (1.0.1)\n",
            "Requirement already satisfied: uvloop!=0.15.0,!=0.15.1,>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from uvicorn>=0.14.0->gradio) (0.19.0)\n",
            "Requirement already satisfied: watchfiles>=0.13 in /usr/local/lib/python3.10/dist-packages (from uvicorn>=0.14.0->gradio) (0.22.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0,>=0.12->gradio) (0.1.2)\n",
            "Requirement already satisfied: python-docx in /usr/local/lib/python3.10/dist-packages (1.1.2)\n",
            "Requirement already satisfied: lxml>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from python-docx) (4.9.4)\n",
            "Requirement already satisfied: typing-extensions>=4.9.0 in /usr/local/lib/python3.10/dist-packages (from python-docx) (4.12.1)\n",
            "Requirement already satisfied: optuna in /usr/local/lib/python3.10/dist-packages (3.6.1)\n",
            "Requirement already satisfied: alembic>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (1.13.1)\n",
            "Requirement already satisfied: colorlog in /usr/local/lib/python3.10/dist-packages (from optuna) (6.8.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from optuna) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (24.0)\n",
            "Requirement already satisfied: sqlalchemy>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (2.0.30)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna) (4.66.4)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna) (6.0.1)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (1.3.5)\n",
            "Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (4.12.1)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.3.0->optuna) (3.0.3)\n",
            "Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako->alembic>=1.5.0->optuna) (2.1.5)\n",
            "Requirement already satisfied: optuna-integration in /usr/local/lib/python3.10/dist-packages (3.6.0)\n",
            "Requirement already satisfied: optuna in /usr/local/lib/python3.10/dist-packages (from optuna-integration) (3.6.1)\n",
            "Requirement already satisfied: alembic>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (1.13.1)\n",
            "Requirement already satisfied: colorlog in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (6.8.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (24.0)\n",
            "Requirement already satisfied: sqlalchemy>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (2.0.30)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (4.66.4)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (6.0.1)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna->optuna-integration) (1.3.5)\n",
            "Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna->optuna-integration) (4.12.1)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.3.0->optuna->optuna-integration) (3.0.3)\n",
            "Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako->alembic>=1.5.0->optuna->optuna-integration) (2.1.5)\n"
          ]
        }
      ],
      "source": [
        "!pip install transformers[torch]\n",
        "!pip install wordcloud\n",
        "!pip install transformers gradio\n",
        "!pip install python-docx\n",
        "!pip install optuna\n",
        "!pip install optuna-integration"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w8gXRlxho743"
      },
      "source": [
        "## Imports and Libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "id": "g2bv3GPpHA7R",
        "outputId": "5c151fba-9ae0-4c45-82e8-ed1f578396fa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ]
        }
      ],
      "source": [
        "# Google Colab specific imports\n",
        "from google.colab import files\n",
        "from google.colab import drive\n",
        "\n",
        "# Data processing and model training\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Transformer models and tokenizers\n",
        "from transformers import (\n",
        "    BertTokenizer, BertForSequenceClassification,\n",
        "    RobertaTokenizer, RobertaForSequenceClassification,\n",
        "    DistilBertTokenizer, DistilBertForSequenceClassification,\n",
        "    GPT2Tokenizer, GPT2ForSequenceClassification,\n",
        "    BartTokenizer, BartForSequenceClassification,\n",
        "    T5Tokenizer, T5ForConditionalGeneration\n",
        ")\n",
        "\n",
        "# PyTorch libraries\n",
        "import torch\n",
        "from torch.utils.data import DataLoader, Dataset\n",
        "import torch.optim as optim\n",
        "\n",
        "# Additional libraries\n",
        "from tqdm import tqdm # For displaying progress bars during training\n",
        "import gradio as gr\n",
        "import docx\n",
        "from collections import Counter\n",
        "import re\n",
        "from wordcloud import WordCloud\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "nltk.download('stopwords')\n",
        "stop_words = set(stopwords.words('english'))\n",
        "import optuna"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cmB89dhvHA7T"
      },
      "source": [
        "## File Upload and Data Loading"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 108
        },
        "id": "ltqC2ugCHA7V",
        "outputId": "918f6c6d-f635-4e6a-9719-ba3fbdb20eff"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-8c1383f9-9f04-42dd-97cb-7dfce18ee3b6\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-8c1383f9-9f04-42dd-97cb-7dfce18ee3b6\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Sentiment_Test.csv to Sentiment_Test (3).csv\n",
            "Saving Sentiment_Training.csv to Sentiment_Training (3).csv\n"
          ]
        }
      ],
      "source": [
        "# Function to upload files in Google Colab\n",
        "def upload_files():\n",
        "    uploaded = files.upload()\n",
        "    return uploaded\n",
        "\n",
        "# Uploading the CSV files\n",
        "uploaded = upload_files()\n",
        "\n",
        "# Loading the CSV files into pandas DataFrames\n",
        "train_data = pd.read_csv('Sentiment_Training.csv', delimiter=';')\n",
        "test_data = pd.read_csv('Sentiment_Test.csv', delimiter=';')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jjuNkQxNHA7c"
      },
      "source": [
        "## Data Exploration and Visualization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "iuHj9kHCHA7d",
        "outputId": "91c03988-187d-4a4b-f18a-2286a2f40aa4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First few rows of the training dataset:\n",
            "   label                                               text\n",
            "0      4  I stalk this truck.  I've been to industrial p...\n",
            "1      2  who really knows if this is good pho or not, i...\n",
            "2      4  I LOVE Bloom Salon... all of their stylist are...\n",
            "3      0  We were excited to eat here, it is difficult t...\n",
            "4      2  So this is a place, with food. That much canno...\n",
            "\n",
            "Information about the training dataset:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10000 entries, 0 to 9999\n",
            "Data columns (total 2 columns):\n",
            " #   Column  Non-Null Count  Dtype \n",
            "---  ------  --------------  ----- \n",
            " 0   label   10000 non-null  int64 \n",
            " 1   text    10000 non-null  object\n",
            "dtypes: int64(1), object(1)\n",
            "memory usage: 156.4+ KB\n",
            "None\n",
            "\n",
            "Statistics of text lengths in the training dataset:\n",
            "count    10000.000000\n",
            "mean       729.239800\n",
            "std        653.262897\n",
            "min          2.000000\n",
            "25%        283.000000\n",
            "50%        544.000000\n",
            "75%        968.000000\n",
            "max       5015.000000\n",
            "Name: text_length, dtype: float64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Distribution of labels in the training dataset:\n",
            "label\n",
            "0    2035\n",
            "1    1977\n",
            "2    1943\n",
            "3    1991\n",
            "4    2054\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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MH/+fP7+7/+e1157jddff53Ozk6+973vTftcLzQ1NTUIIaiqquLKK6+c8GfVqlXj2n/yk58kHA7zL//yL2zcuJFvfetb49af6X6oqanhs5/9LM899xz79u0jlUrxb//2bzN9WlmyZPk/SlZoZMmS5YLhcrn47ne/yxe/+EVuvPHGKdtdd911GIbBd77znXHLv/nNbyJJEtdeey0AQ0NDE7Y9XpTveDpTp9MJwMjIyLT6+Dd/8zc4nU7uu+8+ent7J6xvbGzk29/+9lg/gQmDuX//938H4Prrr5/WMS8G1113HVu2bBknoKLRKD/4wQ+orKykoaFhxo61bNkybDYb//M//0NnZ+c4i4bVamXJkiU88MADRKPRcTEjM3E9r7vuOrq6uvjd7343tiwWi00osBgKhdB1fdyy+fPnI8vypKlw3y5uu+02FEXh/vvvnyCehBAMDg6Off7d737Hr3/9a7761a/yuc99jrvvvpu///u/58iRI2NtHA4HMPF+iMViJBKJcctqampwu93vqOuRJUuWP26yBfuyZMlyQbnnnnvO2ObGG29kw4YN/N3f/R0tLS0sXLiQ5557jscff5zPfOYz1NTUAPBP//RPvPbaa1x//fVUVFTQ19fHf/3Xf1FaWjo2gK2pqcHn8/G9730Pt9uN0+lk5cqVk/r3H2//0EMPcdddd1FfXz+uMvgbb7zBb3/7W+69914AFi5cyD333MMPfvADRkZGuPTSS9myZQs///nPueWWW8ZVwH67+dznPscvf/lLrr32Wj71qU8RCAT4+c9/TnNzMw8//DCyPHPzTBaLheXLl/P6669jtVpZunTpuPVr1qwZmyU/WWjMxPX86Ec/yne+8x0++MEPsn37doqKivjFL34xNsA+zksvvcSf/dmfcccddzBr1ix0XecXv/gFiqLw7ne/ewauwsxQU1PDl770JT7/+c/T0tLCLbfcgtvtprm5mUcffZSPfexj/NVf/RV9fX184hOfYMOGDfzZn/0ZAN/5znd4+eWXuffee9m4cSOyLGO322loaODXv/41s2bNIhAIMG/ePHRd54orruDOO++koaEBVVV59NFH6e3t/aOq2p4lS5Z3OG9XuqssWbL87+Pk9Lan49T0tkJkUq/+xV/8hSguLhaapom6ujrxjW98Q5imOdbmxRdfFDfffLMoLi4WFotFFBcXi/e8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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Text lengths by label:\n",
            "        count        mean         std   min     25%    50%      75%     max\n",
            "label                                                                      \n",
            "0      2035.0  815.115971  747.139814   2.0  302.50  579.0  1091.00  5015.0\n",
            "1      1977.0  809.385432  704.992632  21.0  320.00  602.0  1075.00  5014.0\n",
            "2      1943.0  763.033968  642.396337   7.0  322.50  597.0  1008.50  5011.0\n",
            "3      1991.0  675.672526  560.609923  10.0  273.00  534.0   913.00  5003.0\n",
            "4      2054.0  586.973223  560.745037   8.0  217.25  417.5   752.75  5009.0\n"
          ]
        }
      ],
      "source": [
        "# Display the first few rows and information of the training dataset\n",
        "print(\"First few rows of the training dataset:\")\n",
        "print(train_data.head())\n",
        "\n",
        "print(\"\\nInformation about the training dataset:\")\n",
        "print(train_data.info())\n",
        "\n",
        "# Calculate text length\n",
        "train_data['text_length'] = train_data['text'].apply(len)\n",
        "print(\"\\nStatistics of text lengths in the training dataset:\")\n",
        "print(train_data['text_length'].describe())\n",
        "\n",
        "# Histogram of text lengths\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(train_data['text_length'], bins=50, edgecolor='black')\n",
        "plt.title('Distribution of Text Lengths')\n",
        "plt.xlabel('Text Length')\n",
        "plt.ylabel('Frequency')\n",
        "plt.grid(axis='y')\n",
        "plt.show()\n",
        "\n",
        "# Distribution of labels\n",
        "print(\"\\nDistribution of labels in the training dataset:\")\n",
        "print(train_data['label'].value_counts().sort_index())\n",
        "\n",
        "# Plot of label distribution\n",
        "label_distribution = train_data['label'].value_counts().sort_index()\n",
        "plt.figure(figsize=(10, 6))\n",
        "label_distribution.plot(kind='bar')\n",
        "plt.title('Distribution of Labels')\n",
        "plt.xlabel('Label')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=0)\n",
        "plt.grid(axis='y')\n",
        "plt.show()\n",
        "\n",
        "# Function to clean and tokenize text\n",
        "def tokenize(text):\n",
        "    text = text.lower()\n",
        "    text = re.sub(r'[^a-z\\s]', '', text)\n",
        "    tokens = text.split()\n",
        "    tokens = [word for word in tokens if word not in stop_words]\n",
        "    return tokens\n",
        "\n",
        "# Tokenize all words\n",
        "all_words = train_data['text'].apply(tokenize).sum()\n",
        "\n",
        "# Find most common words\n",
        "word_counts = Counter(all_words)\n",
        "common_words = word_counts.most_common(20)\n",
        "\n",
        "# Generate WordCloud\n",
        "wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(word_counts)\n",
        "\n",
        "# Plot WordCloud\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.imshow(wordcloud, interpolation='bilinear')\n",
        "plt.axis('off')\n",
        "plt.title('Most Common Words in Texts')\n",
        "plt.show()\n",
        "\n",
        "# Text lengths grouped by label and described\n",
        "text_length_by_label = train_data.groupby('label')['text_length'].describe()\n",
        "\n",
        "# Boxplot of text lengths by label\n",
        "plt.figure(figsize=(10, 6))\n",
        "train_data.boxplot(column='text_length', by='label', grid=False)\n",
        "plt.title('Text Lengths by Label')\n",
        "plt.suptitle('')\n",
        "plt.xlabel('Label')\n",
        "plt.ylabel('Text Length')\n",
        "plt.show()\n",
        "\n",
        "# Output text lengths by label\n",
        "print(\"\\nText lengths by label:\")\n",
        "print(text_length_by_label)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UwdMe9geHA7t"
      },
      "source": [
        "## Creating a Slang Dictionary"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 128
        },
        "id": "7-3OV9ILHA7x",
        "outputId": "bf809b02-1c38-4424-9c1d-28da0b4cd0db"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-e16d3d4b-9aa7-469a-ba35-81d0e54d9feb\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-e16d3d4b-9aa7-469a-ba35-81d0e54d9feb\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving abbreviations.docx to abbreviations (1).docx\n",
            "Slang Dictionary: {'u': 'you', 'ur': 'your', 'r': 'are', 'idk': 'i don’t know', 'btw': 'by the way', 'omg': 'oh my god', 'lol': 'laugh out loud', 'brb': 'be right back', 'gtg': 'got to go', 'smh': 'shaking my head', 'tbh': 'to be honest', 'wth': 'what the heck', 'rofl': 'rolling on the floor laughing', 'stfu': 'shut the fuck up', 'icymi': 'in case you missed it', 'tl;dr': 'too long, didn’t read', 'tmi': 'too much information', 'afaik': 'as far as i know', 'lmk': 'let me know', 'nvm': 'nevermind', 'ftw': 'for the win', 'byob': 'bring your own beer', 'bogo': 'buy one get one', 'jk': 'just kidding', 'jw': 'just wondering', 'tgif': 'thank goodness it’s friday', 'tbf': 'to be frank', 'rn': 'right now', 'fubar': 'fucking up beyond all recognition', 'iso': 'in search of', 'brt': 'be right there', 'ftfy': 'fixed that for you', 'gg': 'good game', 'bfd': 'big freaking deal', 'irl': 'in real life', 'dae': 'does anyone else?', 'ngl': 'not gonna lie', 'bts': 'behind the scenes', 'ikr': 'i know right', 'ttyl': 'talk to you later', 'hmu': 'hit me up', 'fwiw': 'for what it’s worth', 'imo': 'in my opinion', 'wyd': 'what are you doing?', 'imho': 'in my humble opinion', 'idc': 'i don’t care', 'idgaf': 'i don’t give a fuck', 'nbd': 'no big deal', 'tba': 'to be announced', 'tbd': 'to be decided', 'afk': 'away from keyboard', 'abt': 'about', 'iykyk': 'if you know you know', 'b4': 'before', 'bc': 'because', 'jic': 'just in case', 'fomo': 'fear of missing out', 'snafu': 'situation normal, all fucking up', 'gtg/g2g': 'got to go', 'h8': 'hate', 'lmao': 'laughing my ass off', 'iykwim': 'if you know what i mean', 'myob': 'mind your own business', 'pov': 'point of view', 'tlc': 'tender loving care', 'hbd': 'happy birthday', 'w/e': 'whatever', 'wtf': 'what the fuck', 'wysiwyg': 'what you see is what you get', 'fwif': 'for what it’s worth', 'tw': 'trigger warning', 'eod': 'end of day', 'faq': 'frequently asked question', 'aka': 'also known as', 'asap': 'as soon as possible', 'diy': 'do it yourself', 'lmgtfy': 'let me google that for you', 'np': 'no problem', 'n/a': 'not applicable', 'ooo': 'out of office', 'tia': 'thanks in advance', 'cob': 'close of business', 'fyi': 'for your information', 'nsfw': 'not safe for work', 'wfh': 'work from home', 'omw': 'on my way', 'wdyt': 'what do you think?', 'wygam': 'when you get a minute', 'smp': 'social media platform', 'dm': 'direct message', 'fb': 'facebook', 'ig': 'instagram', 'li': 'linkedin', 'yt': 'youtube', 'sc': 'snapchat', 'br': 'bereal', 'x': 'previously named twitter', 'wa': 'whatsapp', 'tt': 'tiktok', 'ff': 'follow friday', 'im': 'instant message', 'pm': 'private message', 'op': 'original post', 'qotd': 'quote of the day', 'ootd': 'outfit of the day', 'rt': 'retweet', 'tbt': 'throwback thursday', 'til': 'today i learned', 'ama': 'ask me anything', 'eli5': 'explain like i’m 5', 'fbf': 'flashback friday', 'mfw': 'my feeling when', 'grwm': 'get ready with me', 'ily': 'i love you', 'mcm': 'man crush monday', 'wcw': 'woman crush wednesday', 'bf': 'boyfriend', 'gf': 'girlfriend', 'bae': 'before anyone else', 'lysm': 'love you so much', 'pda': 'public display of affection', 'ltr': 'longterm relationship', 'dtr': 'define the relationship', 'ldr': 'long-distance relationship', 'xoxo': 'hugs and kisses', 'otp': 'one true pairing', 'loml': 'love of my life', 'cta': 'call to action', 'ugc': 'user-generated content', 'ux': 'user experience', 'sms': 'short message service', 'mms': 'multimedia messaging service', 'rcs': 'rich communication services', 'roi': 'return on investment', 'ctr': 'click-through rate', 'cpc': 'cost per click', 'cr': 'conversion rate', 'smb': 'small/medium business', 'tos': 'terms of service', 'scn': 'short code number', '5g': '5th generation, meaning the newest generation of mobile communications', 'tcpa': 'telephone consumer protection act', 'text broadcast': 'a single message sent to a large group of people', 'text to join': 'a method people can use to opt into your text list', 'text to win': 'a contest you run through text message', 'text to landline': 'when you send or receive text messages on a landline phone'}\n"
          ]
        }
      ],
      "source": [
        "# Function to read the Word document and create a slang dictionary\n",
        "def read_slang_dict_from_docx(docx_file):\n",
        "    doc = docx.Document(docx_file)\n",
        "    slang_dict = {}\n",
        "    for para in doc.paragraphs:\n",
        "        if ':' in para.text:\n",
        "            key, value = para.text.split(':', 1)\n",
        "            slang_dict[key.strip().lower()] = value.strip().lower()\n",
        "    return slang_dict\n",
        "\n",
        "# Upload and read the Word document\n",
        "uploaded = upload_files()\n",
        "docx_file = next(iter(uploaded))\n",
        "slang_dict = read_slang_dict_from_docx(docx_file)\n",
        "print(\"Slang Dictionary:\", slang_dict)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Finding and Counting Slang Words in Text Data"
      ],
      "metadata": {
        "id": "8AgNiE7YT7A6"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8O48FXGcHA7z",
        "outputId": "6526ed6b-52b2-45a1-e5ec-13262c2cb38d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Counter({'u': 148, 'lol': 143, 'pm': 122, 'im': 102, 'bf': 86, 'r': 76, 'omg': 65, 'wtf': 54, 'gf': 44, 'bc': 33, 'btw': 25, 'np': 23, 'x': 23, 'fyi': 22, 'til': 21, 'cr': 21, 'aka': 20, 'imo': 19, 'ur': 17, 'asap': 15, 'br': 15, 'wth': 15, 'op': 10, 'smh': 9, 'imho': 8, 'cob': 8, 'abt': 7, 'idk': 7, 'byob': 7, 'diy': 7, 'tgif': 5, 'bogo': 5, 'lmao': 3, 'ff': 3, 'tia': 3, 'jk': 3, 'ftw': 3, 'sc': 2, 'wa': 2, 'li': 2, 'bfd': 2, 'tlc': 2, 'fb': 2, 'snafu': 2, 'pov': 1, 'n/a': 1, 'idgaf': 1, 'pda': 1, 'rt': 1, 'mms': 1, 'tt': 1, 'stfu': 1, 'sms': 1, 'tos': 1, 'tmi': 1, 'w/e': 1, 'tw': 1, 'jw': 1, 'ama': 1})\n"
          ]
        }
      ],
      "source": [
        "# Function to find and count slang words in the text data\n",
        "def find_slang_words(df, slang_dict):\n",
        "    slang_words_found = []\n",
        "\n",
        "    # Using regular expressions to find slang words\n",
        "    slang_pattern = re.compile(r'\\b(' + '|'.join(re.escape(word) for word in slang_dict.keys()) + r')\\b', re.IGNORECASE)\n",
        "\n",
        "    for text in df['text']:\n",
        "        found_words = slang_pattern.findall(text)\n",
        "        slang_words_found.extend(word.lower() for word in found_words)\n",
        "\n",
        "    return Counter(slang_words_found)\n",
        "\n",
        "# Find slang words in the training dataset\n",
        "slang_words_counter = find_slang_words(train_data, slang_dict)\n",
        "\n",
        "# Display slang words and their frequencies\n",
        "print(slang_words_counter)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W847D5kPHA72"
      },
      "source": [
        "## Text Preprocessing and Sentiment Categorization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "60fJ22ZEHA72",
        "outputId": "74f00643-84df-4dcc-d3df-6314ed0dc3b2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First few rows of the processed training dataset:\n",
            "                                                text  \\\n",
            "0  I stalk this truck.  I've been to industrial p...   \n",
            "1  who really knows if this is good pho or not, i...   \n",
            "2  I LOVE Bloom Salon... all of their stylist are...   \n",
            "3  We were excited to eat here, it is difficult t...   \n",
            "4  So this is a place, with food. That much canno...   \n",
            "\n",
            "                                      processed_text  \n",
            "0  I stalk this truck. I've been to industrial pa...  \n",
            "1  who really knows if this is good pho or not, i...  \n",
            "2  I LOVE Bloom Salon... all of their stylist are...  \n",
            "3  We were excited to eat here, it is difficult t...  \n",
            "4  So this is a place, with food. That much canno...  \n",
            "\n",
            "Distribution of sentiment categories in the training dataset:\n",
            "sentiment\n",
            "negative    4012\n",
            "neutral     1943\n",
            "positive    4045\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Text lengths by label:\n",
            "        count        mean         std   min     25%    50%      75%     max\n",
            "label                                                                      \n",
            "0      2035.0  815.115971  747.139814   2.0  302.50  579.0  1091.00  5015.0\n",
            "1      1977.0  809.385432  704.992632  21.0  320.00  602.0  1075.00  5014.0\n",
            "2      1943.0  763.033968  642.396337   7.0  322.50  597.0  1008.50  5011.0\n",
            "3      1991.0  675.672526  560.609923  10.0  273.00  534.0   913.00  5003.0\n",
            "4      2054.0  586.973223  560.745037   8.0  217.25  417.5   752.75  5009.0\n"
          ]
        }
      ],
      "source": [
        "# Function to preprocess text by replacing slang words with their standard equivalents\n",
        "def preprocess_text(text, slang_dict):\n",
        "    text = re.sub(r'\\s+', ' ', text).strip()\n",
        "    words = text.split()\n",
        "    new_words = [slang_dict.get(word.lower(), word) for word in words]\n",
        "    text = ' '.join(new_words)\n",
        "    return text\n",
        "\n",
        "# Apply the preprocessing function to the training dataset\n",
        "train_data['processed_text'] = train_data['text'].apply(lambda x: preprocess_text(x, slang_dict))\n",
        "\n",
        "# Apply the preprocessing function to the test dataset\n",
        "test_data['processed_text'] = test_data['text'].apply(lambda x: preprocess_text(x, slang_dict))\n",
        "\n",
        "# Display the first few rows of the processed training dataset\n",
        "print(\"First few rows of the processed training dataset:\")\n",
        "print(train_data[['text', 'processed_text']].head())\n",
        "\n",
        "# Function to categorize sentiment ratings\n",
        "def categorize_rating(rating):\n",
        "    if rating <= 1:\n",
        "        return 'negative'\n",
        "    elif rating == 2:\n",
        "        return 'neutral'\n",
        "    else:\n",
        "        return 'positive'\n",
        "\n",
        "# Apply the categorization function to the training and test datasets\n",
        "train_data['sentiment'] = train_data['label'].apply(categorize_rating)\n",
        "test_data['sentiment'] = test_data['label'].apply(categorize_rating)\n",
        "\n",
        "# Distribution of sentiment categories in the training dataset\n",
        "print(\"\\nDistribution of sentiment categories in the training dataset:\")\n",
        "print(train_data['sentiment'].value_counts().sort_index())\n",
        "\n",
        "# Plot the distribution of sentiment categories\n",
        "category_distribution = train_data['sentiment'].value_counts().sort_index()\n",
        "plt.figure(figsize=(10, 6))\n",
        "category_distribution.plot(kind='bar')\n",
        "plt.title('Distribution of Sentiment Categories in the Training Dataset')\n",
        "plt.xlabel('Category')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=0)\n",
        "plt.grid(axis='y')\n",
        "plt.show()\n",
        "\n",
        "# Output text lengths by label\n",
        "text_length_by_label = train_data.groupby('label')['text_length'].describe()\n",
        "print(\"\\nText lengths by label:\")\n",
        "print(text_length_by_label)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Splitting Training Data into Training and Validation Sets"
      ],
      "metadata": {
        "id": "SFb33CFEU2ZS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "SRIEY1GaHA8A"
      },
      "outputs": [],
      "source": [
        "# Split training data into training and validation datasets\n",
        "train_data, val_data = train_test_split(train_data, test_size=0.2, stratify=train_data['sentiment'], random_state=42)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-3DiCD_dHA8E"
      },
      "source": [
        "## Dataset und Tokenisierung"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "gBGb2LgyHA8G"
      },
      "outputs": [],
      "source": [
        "# Define the Dataset class\n",
        "class YelpDataset(Dataset):\n",
        "    \"\"\"\n",
        "    A custom dataset class for handling Yelp review data by encoding the text data\n",
        "    and associated labels for use in a PyTorch DataLoader.\n",
        "\n",
        "    Attributes:\n",
        "    encodings (dict): A dictionary containing the encoded text data.\n",
        "    labels (torch.Tensor): A tensor containing the labels for the text data.\n",
        "    \"\"\"\n",
        "    def __init__(self, encodings, labels):\n",
        "        \"\"\"\n",
        "        Initializes the dataset with encoded texts and labels.\n",
        "\n",
        "        Parameters:\n",
        "        encodings (dict): The encoded text data.\n",
        "        labels (torch.Tensor): The labels for the text data.\n",
        "        \"\"\"\n",
        "        self.encodings = encodings\n",
        "        self.labels = labels.clone().detach().requires_grad_(False)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        \"\"\"\n",
        "        Returns a dictionary containing the encoded text data and the corresponding label for a given index.\n",
        "\n",
        "        Parameters:\n",
        "        idx (int): The index of the data item.\n",
        "\n",
        "        Returns:\n",
        "        dict: A dictionary with keys 'input_ids', 'attention_mask', and 'labels'.\n",
        "        \"\"\"\n",
        "        item = {key: val[idx] for key, val in self.encodings.items()}\n",
        "        item['labels'] = self.labels[idx]\n",
        "        return item\n",
        "\n",
        "    def __len__(self):\n",
        "        \"\"\"\n",
        "        Returns the length of the dataset.\n",
        "\n",
        "        Returns:\n",
        "        int: The number of items in the dataset.\n",
        "        \"\"\"\n",
        "        return len(self.labels)\n",
        "\n",
        "# Function to tokenize the data\n",
        "def tokenize_data(data, tokenizer, slang_dict, model_name=None, max_length=18):\n",
        "    \"\"\"\n",
        "    Preprocesses and tokenizes the text data, converting it into a format suitable for input into transformer models.\n",
        "\n",
        "    Parameters:\n",
        "    data (pd.DataFrame): The dataset to be tokenized.\n",
        "    tokenizer (PreTrainedTokenizer): The tokenizer associated with the transformer model.\n",
        "    slang_dict (dict): The dictionary of slang words and their standard equivalents.\n",
        "    model_name (str, optional): Optional parameter to specify the model (e.g., 'T5') for special handling.\n",
        "    max_length (int, optional): The maximum length for tokenized sequences. Defaults to 10.\n",
        "\n",
        "    Returns:\n",
        "    tuple: A tuple containing tokenized inputs and labels or target inputs.\n",
        "    \"\"\"\n",
        "    # Preprocessing the texts\n",
        "    texts = [preprocess_text(text, slang_dict) for text in data['text'].tolist()]\n",
        "    labels = pd.Categorical(data['sentiment']).codes\n",
        "\n",
        "    if model_name == 'T5':\n",
        "        inputs = tokenizer(texts, padding='max_length', truncation=True, max_length=max_length, return_tensors=\"pt\")\n",
        "        targets = [\"positive\" if label == 2 else \"neutral\" if label == 1 else \"negative\" for label in labels]\n",
        "        target_inputs = tokenizer(targets, padding='max_length', truncation=True, max_length=max_length, return_tensors=\"pt\")\n",
        "        return inputs, target_inputs.input_ids\n",
        "    else:\n",
        "        inputs = tokenizer(texts, padding='max_length', truncation=True, max_length=max_length, return_tensors=\"pt\")\n",
        "        return inputs, torch.tensor(labels, dtype=torch.long)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V6cV_ffuHA8N"
      },
      "source": [
        "## Defining Tokenizers and Models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mt7D3s1oHA8O",
        "outputId": "36ebcf5c-d91f-4a87-c175-50e934989cd1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:89: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n",
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n",
            "Some weights of RobertaForSequenceClassification were not initialized from the model checkpoint at roberta-base and are newly initialized: ['classifier.dense.bias', 'classifier.dense.weight', 'classifier.out_proj.bias', 'classifier.out_proj.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n",
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n",
            "Some weights of GPT2ForSequenceClassification were not initialized from the model checkpoint at gpt2 and are newly initialized: ['score.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n",
            "Some weights of BartForSequenceClassification were not initialized from the model checkpoint at facebook/bart-base and are newly initialized: ['classification_head.dense.bias', 'classification_head.dense.weight', 'classification_head.out_proj.bias', 'classification_head.out_proj.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n",
            "You are using the default legacy behaviour of the <class 'transformers.models.t5.tokenization_t5.T5Tokenizer'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565\n",
            "Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.\n"
          ]
        }
      ],
      "source": [
        "# Define tokenizers and models\n",
        "model_configs = {\n",
        "    'BERT': {\n",
        "        'tokenizer': BertTokenizer.from_pretrained('bert-base-uncased'),\n",
        "        'model': BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=3)\n",
        "    },\n",
        "    'RoBERTa': {\n",
        "        'tokenizer': RobertaTokenizer.from_pretrained('roberta-base'),\n",
        "        'model': RobertaForSequenceClassification.from_pretrained('roberta-base', num_labels=3)\n",
        "    },\n",
        "    'DistilBERT': {\n",
        "        'tokenizer': DistilBertTokenizer.from_pretrained('distilbert-base-uncased'),\n",
        "        'model': DistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased', num_labels=3)\n",
        "    },\n",
        "    'GPT-2': {\n",
        "        'tokenizer': GPT2Tokenizer.from_pretrained('gpt2'),\n",
        "        'model': GPT2ForSequenceClassification.from_pretrained('gpt2', num_labels=3)\n",
        "    },\n",
        "    'BART': {\n",
        "        'tokenizer': BartTokenizer.from_pretrained('facebook/bart-base'),\n",
        "        'model': BartForSequenceClassification.from_pretrained('facebook/bart-base', num_labels=3)\n",
        "    },\n",
        "    'T5': {\n",
        "        'tokenizer': T5Tokenizer.from_pretrained('t5-base'),\n",
        "        'model': T5ForConditionalGeneration.from_pretrained('t5-base')\n",
        "    }\n",
        "}"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Ensuring Tokenizer Compatibility"
      ],
      "metadata": {
        "id": "q0b58t0vV7Lc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Ensure all tokenizers have a pad_token and are compatible with their respective models\n",
        "for model_name, config in model_configs.items():\n",
        "    tokenizer = config['tokenizer']\n",
        "    model = config['model']\n",
        "\n",
        "    # Add a pad token if it doesn't exist\n",
        "    if tokenizer.pad_token is None:\n",
        "        tokenizer.add_special_tokens({'pad_token': tokenizer.eos_token})\n",
        "        model.resize_token_embeddings(len(tokenizer))\n",
        "\n",
        "    # Set the required pad_token_id for models\n",
        "    model.config.pad_token_id = tokenizer.pad_token_id\n",
        "    assert tokenizer.pad_token is not None, f\"Pad token not added for {model_name}\""
      ],
      "metadata": {
        "id": "3yH0m7BNWA6x"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Defining the Optimizer"
      ],
      "metadata": {
        "id": "ZCBMMroFWD0V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define optimizer\n",
        "def get_optimizer(model):\n",
        "    \"\"\"\n",
        "    Returns an AdamW optimizer for the given model with a learning rate of 5e-5.\n",
        "\n",
        "    Parameters:\n",
        "    model (nn.Module): The model to optimize.\n",
        "\n",
        "    Returns:\n",
        "    optim.AdamW: The AdamW optimizer.\n",
        "    \"\"\"\n",
        "    return optim.AdamW(model.parameters(), lr=5e-5)"
      ],
      "metadata": {
        "id": "VxE924VmWGvB"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EyWGoaMYHA8P"
      },
      "source": [
        "## Training and Evaluation Loops with Class Weights"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def train(model, dataloader, optimizer, device, class_weights, model_name):\n",
        "    model.train()\n",
        "    total_loss = 0\n",
        "\n",
        "    criterion = torch.nn.CrossEntropyLoss(weight=class_weights.to(device))\n",
        "\n",
        "    for batch in tqdm(dataloader, desc=f\"Training {model_name}\"):\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        input_ids = batch['input_ids'].to(device)\n",
        "        attention_mask = batch['attention_mask'].to(device)\n",
        "        labels = batch['labels'].to(device)\n",
        "\n",
        "        outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
        "        logits = outputs.logits\n",
        "\n",
        "        loss = criterion(logits, labels)\n",
        "\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        total_loss += loss.item()\n",
        "\n",
        "    avg_loss = total_loss / len(dataloader)\n",
        "    return avg_loss\n",
        "\n",
        "# Define the train function for T5\n",
        "def train_t5(model, dataloader, optimizer, device, model_name):\n",
        "    model.train()\n",
        "    total_loss = 0\n",
        "\n",
        "    for batch in tqdm(dataloader, desc=f\"Training {model_name}\"):\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        input_ids = batch['input_ids'].to(device)\n",
        "        attention_mask = batch['attention_mask'].to(device)\n",
        "        labels = batch['labels'].to(device)\n",
        "\n",
        "        outputs = model(input_ids=input_ids, attention_mask=attention_mask, labels=labels)\n",
        "        loss = outputs.loss\n",
        "\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        total_loss += loss.item()\n",
        "\n",
        "    avg_loss = total_loss / len(dataloader)\n",
        "    return avg_loss\n",
        "\n",
        "# Define the evaluate function\n",
        "def train_t5(model, dataloader, optimizer, device, model_name):\n",
        "    model.train()\n",
        "    total_loss = 0\n",
        "\n",
        "    for batch in tqdm(dataloader, desc=f\"Training {model_name}\"):\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        input_ids = batch['input_ids'].to(device)\n",
        "        attention_mask = batch['attention_mask'].to(device)\n",
        "        labels = batch['labels'].to(device)\n",
        "\n",
        "        outputs = model(input_ids=input_ids, attention_mask=attention_mask, labels=labels)\n",
        "        loss = outputs.loss\n",
        "\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        total_loss += loss.item()\n",
        "\n",
        "    avg_loss = total_loss / len(dataloader)\n",
        "    return avg_loss\n",
        "\n",
        "# Define the evaluate function for T5\n",
        "def evaluate_t5(model, dataloader, device, tokenizer, model_name):\n",
        "    model.eval()\n",
        "    total_loss = 0\n",
        "    all_labels = []\n",
        "    all_preds = []\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for batch in tqdm(dataloader, desc=f\"Evaluating {model_name}\"):\n",
        "            input_ids = batch['input_ids'].to(device)\n",
        "            attention_mask = batch['attention_mask'].to(device)\n",
        "            labels = batch['labels'].to(device)\n",
        "\n",
        "            outputs = model(input_ids=input_ids, attention_mask=attention_mask, labels=labels)\n",
        "            loss = outputs.loss\n",
        "            total_loss += loss.item()\n",
        "\n",
        "            # Decoding the predicted sequences and labels\n",
        "            preds = torch.argmax(outputs.logits, dim=2)\n",
        "            decoded_preds = [tokenizer.decode(pred, skip_special_tokens=True) for pred in preds]\n",
        "            decoded_labels = [tokenizer.decode(label, skip_special_tokens=True) for label in labels]\n",
        "\n",
        "            all_preds.extend(decoded_preds)\n",
        "            all_labels.extend(decoded_labels)\n",
        "\n",
        "    avg_loss = total_loss / len(dataloader)\n",
        "    accuracy = np.mean([pred == label for pred, label in zip(all_preds, all_labels)])\n",
        "\n",
        "    return avg_loss, accuracy, all_labels, all_preds"
      ],
      "metadata": {
        "id": "abn9HEO7qFgb"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {
        "id": "JIFyXA_XHA91"
      },
      "outputs": [],
      "source": [
        "# Training function\n",
        "def train_model(model_name, model_class, tokenizer_class, num_labels, learning_rate, batch_size, weight_decay, num_epochs, class_weights):\n",
        "    \"\"\"\n",
        "    Trains a model with the given hyperparameters.\n",
        "\n",
        "    Parameters:\n",
        "    model_name (str): Name of the pre-trained model.\n",
        "    model_class (transformers.PreTrainedModel): The model class.\n",
        "    tokenizer_class (transformers.PreTrainedTokenizer): The tokenizer class.\n",
        "    num_labels (int): Number of labels for classification.\n",
        "    learning_rate (float): Learning rate for the optimizer.\n",
        "    batch_size (int): Batch size for training.\n",
        "    weight_decay (float): Weight decay for the optimizer.\n",
        "    num_epochs (int): Number of training epochs.\n",
        "\n",
        "    Returns:\n",
        "    model: The trained model.\n",
        "    dict: Evaluation results including validation loss and accuracy.\n",
        "    \"\"\"\n",
        "    # Initialize tokenizer and model\n",
        "    tokenizer = tokenizer_class.from_pretrained(model_name)\n",
        "    model = model_class.from_pretrained(model_name, num_labels=num_labels)\n",
        "\n",
        "    train_inputs, train_labels = tokenize_data(train_data, tokenizer, slang_dict, model_name)\n",
        "    val_inputs, val_labels = tokenize_data(val_data, tokenizer, slang_dict, model_name)\n",
        "\n",
        "    train_dataset = YelpDataset(train_inputs, train_labels)\n",
        "    val_dataset = YelpDataset(val_inputs, val_labels)\n",
        "\n",
        "    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
        "    val_loader = DataLoader(val_dataset, batch_size=batch_size)\n",
        "\n",
        "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "    model.to(device)\n",
        "\n",
        "    optimizer = optim.AdamW(model.parameters(), lr=learning_rate, weight_decay=weight_decay)\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        print(f\"Training {model_name} - Epoch {epoch + 1}/{num_epochs}\")\n",
        "        if model_name == 'T5':\n",
        "            train_loss = train_t5(model, train_loader, optimizer, device, model_name)\n",
        "            val_loss, val_accuracy, val_labels, val_preds = evaluate_t5(model, val_loader, device, tokenizer, model_name)\n",
        "        else:\n",
        "            train_loss = train(model, train_loader, optimizer, device, class_weights, model_name)\n",
        "            val_loss, val_accuracy, val_labels, val_preds = evaluate(model, val_loader, device, tokenizer, model_name, class_weights)\n",
        "        print(f\"Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}, Val Accuracy: {val_accuracy:.4f}\")\n",
        "\n",
        "    return model, {\"eval_loss\": val_loss, \"eval_accuracy\": val_accuracy}"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import GenerationConfig\n",
        "\n",
        "# Funktion zur Erstellung einer GenerationConfig für T5\n",
        "def create_generation_config():\n",
        "    return GenerationConfig(\n",
        "        early_stopping=True,\n",
        "        num_beams=4,\n",
        "        no_repeat_ngram_size=3,\n",
        "        forced_bos_token_id=0,\n",
        "        forced_eos_token_id=2\n",
        "    )\n",
        "\n",
        "# Anpassung der Klassifizierungsfunktion für T5\n",
        "def classify_text(text):\n",
        "    print(f\"Classifying text: {text}\")\n",
        "    predictions = {}\n",
        "\n",
        "    for model_name, model_info in loaded_models.items():\n",
        "        tokenizer = model_info['tokenizer']\n",
        "        model = model_info['model']\n",
        "        inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True, max_length=128).to(device)\n",
        "\n",
        "        model.to(device)\n",
        "        model.eval()\n",
        "        with torch.no_grad():\n",
        "            if model_name == 'T5':\n",
        "                generation_config = create_generation_config()\n",
        "                outputs = model.generate(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], generation_config=generation_config)\n",
        "                prediction = tokenizer.decode(outputs[0], skip_special_tokens=True)\n",
        "                predictions[model_name] = prediction\n",
        "            else:\n",
        "                outputs = model(**inputs)\n",
        "                prediction = torch.argmax(outputs.logits, dim=1).item()\n",
        "                predictions[model_name] = id2label[prediction]\n",
        "\n",
        "    return predictions"
      ],
      "metadata": {
        "id": "KR0hu_Xl4nxd"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AKi7TFnuHA93"
      },
      "source": [
        "## Model Training and Evaluation with Class Weights"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "AnuCkwEEHA94",
        "outputId": "b0b4efec-9516-42c8-ff15-7da0b2c71f6f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training BERT - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training BERT: 100%|██████████| 500/500 [00:32<00:00, 15.50it/s]\n",
            "Evaluating BERT: 100%|██████████| 125/125 [00:01<00:00, 109.28it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.0544, Val Loss: 1.9681, Val Accuracy: 0.5985\n",
            "\n",
            "Confusion Matrix for BERT:\n",
            "[[470 171 161]\n",
            " [ 86 173 130]\n",
            " [ 95 160 554]]\n",
            "\n",
            "Classification Report for BERT:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    negative       0.72      0.59      0.65       802\n",
            "     neutral       0.34      0.44      0.39       389\n",
            "    positive       0.66      0.68      0.67       809\n",
            "\n",
            "    accuracy                           0.60      2000\n",
            "   macro avg       0.57      0.57      0.57      2000\n",
            "weighted avg       0.62      0.60      0.61      2000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training RoBERTa - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training RoBERTa: 100%|██████████| 500/500 [00:37<00:00, 13.23it/s]\n",
            "Evaluating RoBERTa: 100%|██████████| 125/125 [00:01<00:00, 90.35it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 1.1005, Val Loss: 1.0983, Val Accuracy: 0.4045\n",
            "\n",
            "Confusion Matrix for RoBERTa:\n",
            "[[  0   0 802]\n",
            " [  0   0 389]\n",
            " [  0   0 809]]\n",
            "\n",
            "Classification Report for RoBERTa:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    negative       1.00      0.00      0.00       802\n",
            "     neutral       1.00      0.00      0.00       389\n",
            "    positive       0.40      1.00      0.58       809\n",
            "\n",
            "    accuracy                           0.40      2000\n",
            "   macro avg       0.80      0.33      0.19      2000\n",
            "weighted avg       0.76      0.40      0.23      2000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training DistilBERT - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training DistilBERT: 100%|██████████| 500/500 [00:20<00:00, 24.71it/s]\n",
            "Evaluating DistilBERT: 100%|██████████| 125/125 [00:00<00:00, 160.37it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.0966, Val Loss: 1.8573, Val Accuracy: 0.5850\n",
            "\n",
            "Confusion Matrix for DistilBERT:\n",
            "[[448 190 164]\n",
            " [ 83 191 115]\n",
            " [103 175 531]]\n",
            "\n",
            "Classification Report for DistilBERT:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    negative       0.71      0.56      0.62       802\n",
            "     neutral       0.34      0.49      0.40       389\n",
            "    positive       0.66      0.66      0.66       809\n",
            "\n",
            "    accuracy                           0.58      2000\n",
            "   macro avg       0.57      0.57      0.56      2000\n",
            "weighted avg       0.62      0.58      0.59      2000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAxQAAAK9CAYAAAC95yoDAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABj0klEQVR4nO3deXhMZ//H8c8kkiCriCRS+1KE2JVUbaW2VCm6UUKV0mhLVDWtB6Wk1YWqWrqhNF3oQ1td7EtVtKpS+1q1lCTWRCKJSOb3h595ZprQnFNMou9Xr3Nd5px7zvnO4Hl887nvcyxWq9UqAAAAADDBxdkFAAAAACi6aCgAAAAAmEZDAQAAAMA0GgoAAAAAptFQAAAAADCNhgIAAACAaTQUAAAAAEyjoQAAAABgGg0FAAAAANNoKAAU2P79+9W+fXv5+vrKYrFoyZIl1/X8f/zxhywWi+bOnXtdz1uUtW7dWq1bt75u50tLS9Pjjz+u4OBgWSwWDRs27Lqd+3qxWCwaN27cdTlXfn+mxo0bJ4vFcl3ODwCgoQCKnIMHD+qJJ55QlSpVVLx4cfn4+Kh58+Z66623lJGRcUOvHRkZqe3bt2vixImaP3++GjdufEOvdzP169dPFotFPj4++X6P+/fvl8VikcVi0euvv274/MePH9e4ceOUkJBwHao1b9KkSZo7d66GDBmi+fPnq0+fPjf0epUqVbJ9by4uLvLz81NYWJgGDRqkn3766bpdJy4uTlOnTr0udVosFhUvXlzVq1fXyJEjdebMGYexVxqSq22JiYmS/tfM2H9+f39/derUSfHx8ZKkuXPnXvNcV7ZKlSqZ/mwAcKMVc3YBAArum2++0QMPPCAPDw/17dtXderU0cWLF7VhwwaNHDlSO3fu1LvvvntDrp2RkaH4+Hi9+OKLGjp06A25RsWKFZWRkSE3N7cbcv6/U6xYMV24cEFff/21HnzwQYdjH3/8sYoXL67MzExT5z5+/LheeuklVapUSfXr1y/w+5YvX27qelezevVqNWvWTGPHjr2u572W+vXra8SIEZKk8+fPa/fu3Vq4cKHee+89DR8+XG+++abD+IyMDBUrZuz/nuLi4rRjx448iYuRP1P2dWZmZmrLli2aOnWq1q1bp59//jnP+JkzZ8rLyyvPfj8/P4fXjzzyiDp37qycnBzt27dPM2bMUJs2bbR582a1bNlS8+fPdxj/+OOP64477tCgQYNs+/K7DgAUFjQUQBFx6NAhPfzww6pYsaJWr16tsmXL2o5FRUXpwIED+uabb27Y9U+ePCkp7z+WrqcrPxl2Fg8PDzVv3lyffPJJnoYiLi5OERER+uKLL25KLRcuXFDJkiXl7u5+Xc+bnJys0NDQ63a+S5cuKTc395p13nbbbXr00Ucd9r366qvq1auXpkyZourVq2vIkCG2Y9fzz4CRP1N/rfPxxx+Xl5eXXn/9de3fv1/Vq1d3GN+zZ08FBAT87XkbNmzocN4WLVqoU6dOmjlzpmbMmKEqVao4jB88eLCqVKmS5zsDgMKKKU9AETF58mSlpaXpgw8+cGgmrqhWrZqeeeYZ2+tLly5pwoQJqlq1qjw8PFSpUiW98MILysrKcnhfpUqVdO+992rDhg264447VLx4cVWpUkUfffSRbcy4ceNUsWJFSdLIkSMdpmD069cv3+kY+c1TX7Fihe666y75+fnJy8tLNWrU0AsvvGA7frU1FKtXr1aLFi3k6ekpPz8/de3aVbt37873egcOHFC/fv3k5+cnX19f9e/fXxcuXLj6F/sXvXr10nfffadz587Z9m3evFn79+9Xr1698ow/c+aMnn32WYWFhcnLy0s+Pj7q1KmTfvvtN9uYtWvXqkmTJpKk/v3726axXPmcrVu3Vp06dbRlyxa1bNlSJUuWtH0vf11DERkZqeLFi+f5/B06dFCpUqV0/PjxfD/X2rVrZbFYdOjQIX3zzTe2Gv744w9JlxuNAQMGKCgoSMWLF1e9evU0b948h3Nc+f15/fXXNXXqVNufrV27dhXou7VXokQJzZ8/X/7+/po4caKsVqvt2F/XUJw/f17Dhg1TpUqV5OHhocDAQN1zzz369ddfbd/RN998o8OHD+eZIvRP1+UEBwdLkuHE5FpatGgh6fL0RQC4FZBQAEXE119/rSpVqujOO+8s0PjHH39c8+bNU8+ePTVixAj99NNPio2N1e7du7V48WKHsQcOHFDPnj01YMAARUZG6sMPP1S/fv3UqFEj1a5dW927d5efn5+GDx9um75hdArGzp07de+996pu3boaP368PDw8dODAAf3444/XfN/KlSvVqVMnValSRePGjVNGRobefvttNW/eXL/++mueZubBBx9U5cqVFRsbq19//VXvv/++AgMD9eqrrxaozu7du2vw4MH673//q8cee0zS5XSiZs2aatiwYZ7xv//+u5YsWaIHHnhAlStXVlJSkmbPnq1WrVpp165dCgkJUa1atTR+/HiNGTNGgwYNsv2D0v738vTp0+rUqZMefvhhPfroowoKCsq3vrfeekurV69WZGSk4uPj5erqqtmzZ2v58uWaP3++QkJC8n1frVq1NH/+fA0fPlzlypWzTe0pU6aMMjIy1Lp1ax04cEBDhw5V5cqVtXDhQvXr10/nzp1zaFQlac6cOcrMzNSgQYPk4eEhf3//An23f+Xl5aX7779fH3zwgXbt2qXatWvnO27w4MFatGiRhg4dqtDQUJ0+fVobNmzQ7t271bBhQ7344otKSUnRsWPHNGXKFNu5jcrOztapU6ckXZ7ytHXrVr355ptq2bKlKleunGf8X9dWSJcbj79L8a40caVKlTJcIwAUSlYAhV5KSopVkrVr164FGp+QkGCVZH388ccd9j/77LNWSdbVq1fb9lWsWNEqybp+/XrbvuTkZKuHh4d1xIgRtn2HDh2ySrK+9tprDueMjIy0VqxYMU8NY8eOtdr/T8yUKVOskqwnT568at1XrjFnzhzbvvr161sDAwOtp0+ftu377bffrC4uLta+ffvmud5jjz3mcM7777/fWrp06ate0/5zeHp6Wq1Wq7Vnz57Wtm3bWq1WqzUnJ8caHBxsfemll/L9DjIzM605OTl5PoeHh4d1/Pjxtn2bN2/O89muaNWqlVWSddasWfkea9WqlcO+ZcuWWSVZX375Zevvv/9u9fLysnbr1u1vP6PVevn3OyIiwmHf1KlTrZKsCxYssO27ePGiNTw83Orl5WVNTU21fS5JVh8fH2tycrLp69m78ufiyy+/tO2TZB07dqztta+vrzUqKuqa14mIiMj3z2F+f6b++mfzSp2S8mzNmze3njp1ymHslffnt9WoUSPPtV966SXryZMnrYmJidYffvjB2qRJE6sk68KFC/P9LJ6entbIyMhrfl4AKEyY8gQUAampqZIkb2/vAo3/9ttvJUnR0dEO+6/8VPqvay1CQ0NtPzWXLv/UukaNGvr9999N1/xXV35q++WXXyo3N7dA7zlx4oQSEhLUr18/h5+C161bV/fcc4/tc9obPHiww+sWLVro9OnTtu+wIHr16qW1a9cqMTFRq1evVmJiYr7TnaTL6y5c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ZcsWNWzYMN/xYWFhys3N1bp162xTnuxdSUhycnJs+0JDQ+Xh4aEjR45cNdmoVauWvvrqK4d9mzZt+vsPCQD412NRNgDcIL1791ZAQIC6du2qH374QYcOHdLatWv19NNP69ixY5KkZ555Rq+88oqWLFmiPXv26Mknn7zmMyQqVaqkyMhIPfbYY1qyZIntnJ9//rkkqWLFirJYLFq6dKlOnjyptLQ0eXt769lnn9Xw4cM1b948HTx4UL/++qvefvttzZs3T5I0ePBg7d+/XyNHjtTevXsVFxenuXPn3uivCABwC6ChAIAbpGTJklq/fr0qVKig7t27q1atWhowYIAyMzNticWIESPUp08fRUZGKjw8XN7e3rr//vuved6ZM2eqZ8+eevLJJ1WzZk0NHDhQ6enpkqTbbrtNL730kp5//nkFBQVp6NChkqQJEyboP//5j2JjY1WrVi117NhR33zzjSpXrixJqlChgr744gstWbJE9erV06xZszRp0qQb+O0AAG4VFuvVVv4BAAAAwN8goQAAAABgGg0FAAAAANNoKAAAAACYRkMBAAAAwDQaCgAAAACm0VAAAAAAMI2GAgAAAIBpNBQAAAAATKOhAAAAAGAaDQUAAAAA02goAAAAAJj2f3llZGf27UMyAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training GPT-2 - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training GPT-2: 100%|██████████| 500/500 [00:37<00:00, 13.24it/s]\n",
            "Evaluating GPT-2: 100%|██████████| 125/125 [00:01<00:00, 82.00it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.1082, Val Loss: 1.8039, Val Accuracy: 0.5900\n",
            "\n",
            "Confusion Matrix for GPT-2:\n",
            "[[513 199  90]\n",
            " [107 192  90]\n",
            " [132 202 475]]\n",
            "\n",
            "Classification Report for GPT-2:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    negative       0.68      0.64      0.66       802\n",
            "     neutral       0.32      0.49      0.39       389\n",
            "    positive       0.73      0.59      0.65       809\n",
            "\n",
            "    accuracy                           0.59      2000\n",
            "   macro avg       0.58      0.57      0.57      2000\n",
            "weighted avg       0.63      0.59      0.60      2000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training BART - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training BART: 100%|██████████| 500/500 [00:42<00:00, 11.64it/s]\n",
            "Evaluating BART: 100%|██████████| 125/125 [00:01<00:00, 84.94it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.2294, Val Loss: 1.6852, Val Accuracy: 0.6230\n",
            "\n",
            "Confusion Matrix for BART:\n",
            "[[517 106 179]\n",
            " [116 115 158]\n",
            " [121  74 614]]\n",
            "\n",
            "Classification Report for BART:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    negative       0.69      0.64      0.66       802\n",
            "     neutral       0.39      0.30      0.34       389\n",
            "    positive       0.65      0.76      0.70       809\n",
            "\n",
            "    accuracy                           0.62      2000\n",
            "   macro avg       0.57      0.57      0.57      2000\n",
            "weighted avg       0.61      0.62      0.61      2000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\n",
            "Non-default generation parameters: {'early_stopping': True, 'num_beams': 4, 'no_repeat_ngram_size': 3, 'forced_bos_token_id': 0, 'forced_eos_token_id': 2}\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training T5 - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training T5: 100%|██████████| 500/500 [01:26<00:00,  5.78it/s]\n",
            "Evaluating T5: 100%|██████████| 125/125 [00:09<00:00, 12.64it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.0453, Val Loss: 0.0430, Val Accuracy: 0.6530\n",
            "\n",
            "Confusion Matrix for T5:\n",
            "[[632  34 136]\n",
            " [170  69 150]\n",
            " [172  32 605]]\n",
            "\n",
            "Classification Report for T5:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    negative       0.65      0.79      0.71       802\n",
            "     neutral       0.51      0.18      0.26       389\n",
            "    positive       0.68      0.75      0.71       809\n",
            "\n",
            "    accuracy                           0.65      2000\n",
            "   macro avg       0.61      0.57      0.56      2000\n",
            "weighted avg       0.63      0.65      0.62      2000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Define class weights\n",
        "class_weights = torch.tensor([1.0, 2.0, 1.0])\n",
        "\n",
        "trained_models = {}\n",
        "for model_name, config in model_configs.items():\n",
        "    tokenizer = config['tokenizer']\n",
        "    model = config['model']\n",
        "\n",
        "    train_inputs, train_labels = tokenize_data(train_data, tokenizer, slang_dict, model_name)\n",
        "    val_inputs, val_labels = tokenize_data(val_data, tokenizer, slang_dict, model_name)\n",
        "    test_inputs, test_labels = tokenize_data(test_data, tokenizer, slang_dict, model_name)\n",
        "\n",
        "    train_dataset = YelpDataset(train_inputs, train_labels)\n",
        "    val_dataset = YelpDataset(val_inputs, val_labels)\n",
        "    test_dataset = YelpDataset(test_inputs, test_labels)\n",
        "\n",
        "    train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)\n",
        "    val_loader = DataLoader(val_dataset, batch_size=16)\n",
        "    test_loader = DataLoader(test_dataset, batch_size=16)\n",
        "\n",
        "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "    model.to(device)\n",
        "\n",
        "    optimizer = get_optimizer(model)\n",
        "\n",
        "    epochs = 1\n",
        "    for epoch in range(epochs):\n",
        "        print(f\"Training {model_name} - Epoch {epoch + 1}/{epochs}\")\n",
        "        if model_name == 'T5':\n",
        "            train_loss = train_t5(model, train_loader, optimizer, device, model_name)\n",
        "            val_loss, val_accuracy, val_labels, val_preds = evaluate_t5(model, val_loader, device, tokenizer, model_name)\n",
        "        else:\n",
        "            train_loss = train(model, train_loader, optimizer, device, class_weights, model_name)\n",
        "            val_loss, val_accuracy, val_labels, val_preds = evaluate(model, val_loader, device, tokenizer, model_name, class_weights)\n",
        "        print(f\"Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}, Val Accuracy: {val_accuracy:.4f}\")\n",
        "\n",
        "    conf_matrix = confusion_matrix(val_labels, val_preds)\n",
        "    class_report = classification_report(val_labels, val_preds, target_names=['negative', 'neutral', 'positive'], zero_division=1)\n",
        "\n",
        "    print(f\"\\nConfusion Matrix for {model_name}:\")\n",
        "    print(conf_matrix)\n",
        "\n",
        "    print(f\"\\nClassification Report for {model_name}:\")\n",
        "    print(class_report)\n",
        "\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
        "    plt.xlabel('Predicted')\n",
        "    plt.ylabel('Actual')\n",
        "    plt.title(f'Confusion Matrix for {model_name}')\n",
        "    plt.show()\n",
        "\n",
        "    trained_models[model_name] = {\n",
        "        'model': model,\n",
        "        'tokenizer': tokenizer,\n",
        "        'val_loss': val_loss,\n",
        "        'val_accuracy': val_accuracy,\n",
        "        'conf_matrix': conf_matrix,\n",
        "        'class_report': class_report\n",
        "    }\n",
        "\n",
        "    model_save_path = f\"{model_name}_model\"\n",
        "    model.save_pretrained(model_save_path)\n",
        "    tokenizer.save_pretrained(model_save_path)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Hyperparameter Optimization with Optuna"
      ],
      "metadata": {
        "id": "kieRZLxPYzE2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the Optuna Objective Function\n",
        "def objective(trial):\n",
        "    \"\"\"\n",
        "    Objective function for Optuna hyperparameter optimization.\n",
        "\n",
        "    Parameters:\n",
        "    trial (optuna.trial.Trial): A single optimization trial.\n",
        "\n",
        "    Returns:\n",
        "    float: The evaluation accuracy of the trained model.\n",
        "    \"\"\"\n",
        "    learning_rate = trial.suggest_float(\"learning_rate\", 1e-5, 5e-5, log=True)\n",
        "    batch_size = trial.suggest_categorical(\"batch_size\", [8, 16, 32])\n",
        "    weight_decay = trial.suggest_float(\"weight_decay\", 0.0, 0.1, step=0.01)\n",
        "\n",
        "    # Train the model\n",
        "    model, eval_results = train_model(\n",
        "        'distilbert-base-uncased',\n",
        "        DistilBertForSequenceClassification,\n",
        "        DistilBertTokenizer,\n",
        "        num_labels=3,\n",
        "        learning_rate=learning_rate,\n",
        "        batch_size=batch_size,\n",
        "        weight_decay=weight_decay,\n",
        "        num_epochs=1,\n",
        "        class_weights=class_weights  # Add class_weights here\n",
        "    )\n",
        "\n",
        "    if 'eval_accuracy' in eval_results:\n",
        "        return eval_results['eval_accuracy']\n",
        "    else:\n",
        "        raise KeyError(\"eval_accuracy not found in eval_results\")\n",
        "\n",
        "# Create and Run Optuna Study\n",
        "study = optuna.create_study(direction=\"maximize\")\n",
        "study.optimize(objective, n_trials=20)\n",
        "\n",
        "# Print Best Hyperparameters\n",
        "print(\"Best Hyperparameters: \", study.best_params)\n",
        "best_params = study.best_params"
      ],
      "metadata": {
        "id": "Hyr49yC1Y1J1",
        "outputId": "77fe8e3a-ae47-434b-d9f1-8098895a686c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2024-06-09 12:34:48,222] A new study created in memory with name: no-name-bf5e9f07-e164-41aa-9ccc-b70c77aa6b59\n",
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 500/500 [00:20<00:00, 24.62it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 125/125 [00:00<00:00, 158.57it/s]\n",
            "[I 2024-06-09 12:35:38,357] Trial 0 finished with value: 0.6045 and parameters: {'learning_rate': 1.613730033801983e-05, 'batch_size': 16, 'weight_decay': 0.06}. Best is trial 0 with value: 0.6045.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9468, Val Loss: 0.8675, Val Accuracy: 0.6045\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 500/500 [00:20<00:00, 24.61it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 125/125 [00:00<00:00, 158.88it/s]\n",
            "[I 2024-06-09 12:36:27,939] Trial 1 finished with value: 0.5985 and parameters: {'learning_rate': 4.3426028953705075e-05, 'batch_size': 16, 'weight_decay': 0.01}. Best is trial 0 with value: 0.6045.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9380, Val Loss: 0.9120, Val Accuracy: 0.5985\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.70it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 161.27it/s]\n",
            "[I 2024-06-09 12:37:38,318] Trial 2 finished with value: 0.6075 and parameters: {'learning_rate': 1.9946519694065192e-05, 'batch_size': 8, 'weight_decay': 0.04}. Best is trial 2 with value: 0.6075.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9360, Val Loss: 0.8757, Val Accuracy: 0.6075\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 250/250 [00:11<00:00, 22.37it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 63/63 [00:00<00:00, 126.19it/s]\n",
            "[I 2024-06-09 12:38:18,878] Trial 3 finished with value: 0.584 and parameters: {'learning_rate': 2.9669520195592077e-05, 'batch_size': 32, 'weight_decay': 0.01}. Best is trial 2 with value: 0.6075.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9549, Val Loss: 0.8733, Val Accuracy: 0.5840\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.55it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 161.85it/s]\n",
            "[I 2024-06-09 12:39:29,453] Trial 4 finished with value: 0.5895 and parameters: {'learning_rate': 4.345922968538364e-05, 'batch_size': 8, 'weight_decay': 0.1}. Best is trial 2 with value: 0.6075.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9461, Val Loss: 0.9111, Val Accuracy: 0.5895\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 250/250 [00:11<00:00, 22.46it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 63/63 [00:00<00:00, 127.12it/s]\n",
            "[I 2024-06-09 12:40:09,395] Trial 5 finished with value: 0.5835 and parameters: {'learning_rate': 1.683747308226901e-05, 'batch_size': 32, 'weight_decay': 0.07}. Best is trial 2 with value: 0.6075.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9572, Val Loss: 0.8761, Val Accuracy: 0.5835\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.76it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 164.20it/s]\n",
            "[I 2024-06-09 12:41:19,686] Trial 6 finished with value: 0.61 and parameters: {'learning_rate': 4.2310508829669764e-05, 'batch_size': 8, 'weight_decay': 0.06}. Best is trial 6 with value: 0.61.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9366, Val Loss: 0.8926, Val Accuracy: 0.6100\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.78it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 163.86it/s]\n",
            "[I 2024-06-09 12:42:30,079] Trial 7 finished with value: 0.596 and parameters: {'learning_rate': 1.5538350540256164e-05, 'batch_size': 8, 'weight_decay': 0.02}. Best is trial 6 with value: 0.61.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9391, Val Loss: 0.8666, Val Accuracy: 0.5960\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 250/250 [00:11<00:00, 22.42it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 63/63 [00:00<00:00, 127.48it/s]\n",
            "[I 2024-06-09 12:43:10,163] Trial 8 finished with value: 0.589 and parameters: {'learning_rate': 1.7326327856973717e-05, 'batch_size': 32, 'weight_decay': 0.09}. Best is trial 6 with value: 0.61.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9613, Val Loss: 0.8806, Val Accuracy: 0.5890\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 500/500 [00:20<00:00, 24.66it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 125/125 [00:00<00:00, 160.91it/s]\n",
            "[I 2024-06-09 12:43:59,931] Trial 9 finished with value: 0.5735 and parameters: {'learning_rate': 1.1465640018452272e-05, 'batch_size': 16, 'weight_decay': 0.08}. Best is trial 6 with value: 0.61.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9765, Val Loss: 0.8855, Val Accuracy: 0.5735\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.75it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 163.10it/s]\n",
            "[I 2024-06-09 12:45:10,145] Trial 10 finished with value: 0.6035 and parameters: {'learning_rate': 2.847661918175828e-05, 'batch_size': 8, 'weight_decay': 0.04}. Best is trial 6 with value: 0.61.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9365, Val Loss: 0.8886, Val Accuracy: 0.6035\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.71it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 162.91it/s]\n",
            "[I 2024-06-09 12:46:20,569] Trial 11 finished with value: 0.583 and parameters: {'learning_rate': 2.487034858206987e-05, 'batch_size': 8, 'weight_decay': 0.04}. Best is trial 6 with value: 0.61.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9359, Val Loss: 0.8614, Val Accuracy: 0.5830\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.73it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 161.20it/s]\n",
            "[I 2024-06-09 12:47:30,907] Trial 12 finished with value: 0.5645 and parameters: {'learning_rate': 3.480935720209454e-05, 'batch_size': 8, 'weight_decay': 0.05}. Best is trial 6 with value: 0.61.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9408, Val Loss: 0.8774, Val Accuracy: 0.5645\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.65it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 160.40it/s]\n",
            "[I 2024-06-09 12:48:41,822] Trial 13 finished with value: 0.59 and parameters: {'learning_rate': 2.066295884947737e-05, 'batch_size': 8, 'weight_decay': 0.03}. Best is trial 6 with value: 0.61.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9448, Val Loss: 0.8803, Val Accuracy: 0.5900\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.77it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 161.99it/s]\n",
            "[I 2024-06-09 12:49:52,193] Trial 14 finished with value: 0.5585 and parameters: {'learning_rate': 4.99250717071816e-05, 'batch_size': 8, 'weight_decay': 0.06}. Best is trial 6 with value: 0.61.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9595, Val Loss: 0.8862, Val Accuracy: 0.5585\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.76it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 162.42it/s]\n",
            "[I 2024-06-09 12:51:02,667] Trial 15 finished with value: 0.6195 and parameters: {'learning_rate': 1.0615749001334002e-05, 'batch_size': 8, 'weight_decay': 0.05}. Best is trial 15 with value: 0.6195.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9429, Val Loss: 0.8842, Val Accuracy: 0.6195\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.73it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 162.65it/s]\n",
            "[I 2024-06-09 12:52:13,187] Trial 16 finished with value: 0.6085 and parameters: {'learning_rate': 1.1492336934833325e-05, 'batch_size': 8, 'weight_decay': 0.07}. Best is trial 15 with value: 0.6195.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9414, Val Loss: 0.8708, Val Accuracy: 0.6085\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.72it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 163.31it/s]\n",
            "[I 2024-06-09 12:53:23,936] Trial 17 finished with value: 0.5555 and parameters: {'learning_rate': 1.0027160153017647e-05, 'batch_size': 8, 'weight_decay': 0.06}. Best is trial 15 with value: 0.6195.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9449, Val Loss: 0.8740, Val Accuracy: 0.5555\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 500/500 [00:19<00:00, 26.13it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 125/125 [00:00<00:00, 160.42it/s]\n",
            "[I 2024-06-09 12:54:12,282] Trial 18 finished with value: 0.5745 and parameters: {'learning_rate': 3.476052749214537e-05, 'batch_size': 16, 'weight_decay': 0.0}. Best is trial 15 with value: 0.6195.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9425, Val Loss: 0.8890, Val Accuracy: 0.5745\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 250/250 [00:11<00:00, 22.30it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 63/63 [00:00<00:00, 126.67it/s]\n",
            "[I 2024-06-09 12:54:52,380] Trial 19 finished with value: 0.5945 and parameters: {'learning_rate': 1.3131960329013192e-05, 'batch_size': 32, 'weight_decay': 0.08}. Best is trial 15 with value: 0.6195.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9699, Val Loss: 0.8822, Val Accuracy: 0.5945\n",
            "Best Hyperparameters:  {'learning_rate': 1.0615749001334002e-05, 'batch_size': 8, 'weight_decay': 0.05}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Training the Best Model with Optimized Hyperparameters"
      ],
      "metadata": {
        "id": "GJ4Pl6w6ZuNT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to train the best model\n",
        "def train_best_model(model_name, model_class, tokenizer_class, num_labels, best_params, num_epochs, class_weights):\n",
        "    tokenizer = tokenizer_class.from_pretrained(model_name)\n",
        "    model = model_class.from_pretrained(model_name, num_labels=num_labels)\n",
        "\n",
        "    train_inputs, train_labels = tokenize_data(train_data, tokenizer, slang_dict, model_name)\n",
        "    val_inputs, val_labels = tokenize_data(val_data, tokenizer, slang_dict, model_name)\n",
        "\n",
        "    train_dataset = YelpDataset(train_inputs, train_labels)\n",
        "    val_dataset = YelpDataset(val_inputs, val_labels)\n",
        "\n",
        "    train_loader = DataLoader(train_dataset, batch_size=best_params[\"batch_size\"], shuffle=True)\n",
        "    val_loader = DataLoader(val_dataset, batch_size=best_params[\"batch_size\"])\n",
        "\n",
        "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "    model.to(device)\n",
        "\n",
        "    optimizer = optim.AdamW(model.parameters(), lr=best_params[\"learning_rate\"], weight_decay=best_params[\"weight_decay\"])\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        print(f\"Training {model_name} - Epoch {epoch + 1}/{num_epochs}\")\n",
        "        if model_name == 'T5':\n",
        "            train_loss = train_t5(model, train_loader, optimizer, device, model_name)\n",
        "            val_loss, val_accuracy, val_labels, val_preds = evaluate_t5(model, val_loader, device, tokenizer, model_name)\n",
        "        else:\n",
        "            train_loss = train(model, train_loader, optimizer, device, class_weights, model_name)\n",
        "            val_loss, val_accuracy, val_labels, val_preds = evaluate(model, val_loader, device, tokenizer, model_name, class_weights)\n",
        "        print(f\"Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}, Val Accuracy: {val_accuracy:.4f}\")\n",
        "\n",
        "    return model, {\"eval_loss\": val_loss, \"eval_accuracy\": val_accuracy}\n",
        "\n",
        "best_model, best_eval_results = train_best_model(\n",
        "    'distilbert-base-uncased',\n",
        "    DistilBertForSequenceClassification,\n",
        "    DistilBertTokenizer,\n",
        "    num_labels=3,\n",
        "    best_params=best_params,\n",
        "    num_epochs=3,\n",
        "    class_weights=class_weights\n",
        ")\n",
        "\n",
        "print(f\"Best Model Evaluation Results: {best_eval_results}\")\n",
        "\n",
        "best_val_loss, best_val_accuracy, best_val_labels, best_val_preds = evaluate(\n",
        "    best_model,\n",
        "    DataLoader(YelpDataset(*tokenize_data(val_data, DistilBertTokenizer.from_pretrained('distilbert-base-uncased'), slang_dict, 'distilbert-base-uncased')), batch_size=best_params[\"batch_size\"]),\n",
        "    torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\"),\n",
        "    DistilBertTokenizer.from_pretrained('distilbert-base-uncased'),\n",
        "    'distilbert-base-uncased',\n",
        "    class_weights\n",
        ")\n",
        "conf_matrix = confusion_matrix(best_val_labels, best_val_preds)\n",
        "class_report = classification_report(best_val_labels, best_val_preds, target_names=['negative', 'neutral', 'positive'], zero_division=1)\n",
        "\n",
        "print(f\"\\nConfusion Matrix for Best Model:\")\n",
        "print(conf_matrix)\n",
        "\n",
        "print(f\"\\nClassification Report for Best Model:\")\n",
        "print(class_report)\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.title(f'Confusion Matrix for Best Model')\n",
        "plt.show()\n",
        "\n",
        "best_model_save_path = \"best_model\"\n",
        "best_model.save_pretrained(best_model_save_path)\n",
        "DistilBertTokenizer.from_pretrained('distilbert-base-uncased').save_pretrained(best_model_save_path)"
      ],
      "metadata": {
        "id": "4GFT23peZz7y",
        "outputId": "f4d6fe6f-bcb4-4b4f-e779-93209f08b193",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training distilbert-base-uncased - Epoch 1/3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.70it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 158.66it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.9480, Val Loss: 0.8944, Val Accuracy: 0.6025\n",
            "Training distilbert-base-uncased - Epoch 2/3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.65it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 162.64it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.7961, Val Loss: 0.8749, Val Accuracy: 0.6115\n",
            "Training distilbert-base-uncased - Epoch 3/3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training distilbert-base-uncased: 100%|██████████| 1000/1000 [00:40<00:00, 24.62it/s]\n",
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 162.86it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss: 0.6403, Val Loss: 0.9150, Val Accuracy: 0.5860\n",
            "Best Model Evaluation Results: {'eval_loss': 0.914991683125496, 'eval_accuracy': 0.586}\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Evaluating distilbert-base-uncased: 100%|██████████| 250/250 [00:01<00:00, 161.21it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Confusion Matrix for Best Model:\n",
            "[[511 229  62]\n",
            " [102 231  56]\n",
            " [134 245 430]]\n",
            "\n",
            "Classification Report for Best Model:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    negative       0.68      0.64      0.66       802\n",
            "     neutral       0.33      0.59      0.42       389\n",
            "    positive       0.78      0.53      0.63       809\n",
            "\n",
            "    accuracy                           0.59      2000\n",
            "   macro avg       0.60      0.59      0.57      2000\n",
            "weighted avg       0.66      0.59      0.60      2000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('best_model/tokenizer_config.json',\n",
              " 'best_model/special_tokens_map.json',\n",
              " 'best_model/vocab.txt',\n",
              " 'best_model/added_tokens.json')"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Evaluate on Test Dataset Function"
      ],
      "metadata": {
        "id": "MpPETAXVcGgf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to evaluate on test dataset\n",
        "def evaluate_on_test_dataset(model, test_dataset, tokenizer, class_weights):\n",
        "    \"\"\"\n",
        "    Evaluates the trained model on the test dataset.\n",
        "\n",
        "    Parameters:\n",
        "    model (nn.Module): The trained model.\n",
        "    test_dataset (pd.DataFrame): The test dataset.\n",
        "    tokenizer (PreTrainedTokenizer): The tokenizer used for tokenizing the test data.\n",
        "    class_weights (torch.Tensor): Class weights for the loss function.\n",
        "\n",
        "    Returns:\n",
        "    None\n",
        "    \"\"\"\n",
        "    # Tokenize the test dataset\n",
        "    test_inputs, test_labels = tokenize_data(test_dataset, tokenizer, slang_dict, 'distilbert-base-uncased')\n",
        "    test_dataset = YelpDataset(test_inputs, test_labels)\n",
        "    test_loader = DataLoader(test_dataset, batch_size=best_params[\"batch_size\"])\n",
        "\n",
        "    # Evaluate the model\n",
        "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "    model.to(device)\n",
        "    test_loss, test_accuracy, test_labels, test_preds = evaluate(model, test_loader, device, tokenizer, 'distilbert-base-uncased', class_weights)\n",
        "\n",
        "    # Classification report\n",
        "    print(\"Classification Report on Test Dataset:\")\n",
        "    print(classification_report(test_labels, test_preds, target_names=['negative', 'neutral', 'positive'], zero_division=1))\n",
        "\n",
        "    # Confusion matrix\n",
        "    cm = confusion_matrix(test_labels, test_preds)\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    sns.heatmap(cm, annot=True, fmt='d', xticklabels=['negative', 'neutral', 'positive'], yticklabels=['negative', 'neutral', 'positive'], cmap='Blues')\n",
        "    plt.xlabel('Predicted')\n",
        "    plt.ylabel('True')\n",
        "    plt.title('Confusion Matrix on Test Dataset')\n",
        "    plt.show()\n",
        "\n",
        "# Evaluate the best model on the test dataset\n",
        "evaluate_on_test_dataset(best_model, test_data, DistilBertTokenizer.from_pretrained('distilbert-base-uncased'), class_weights)"
      ],
      "metadata": {
        "id": "WWHOoE1tcIt3",
        "outputId": "7b69e2b1-b01f-4770-a9ad-1295dd741c4d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 926
        }
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Evaluating distilbert-base-uncased: 100%|██████████| 313/313 [00:01<00:00, 162.03it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report on Test Dataset:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    negative       0.73      0.65      0.68      1061\n",
            "     neutral       0.30      0.58      0.40       474\n",
            "    positive       0.74      0.49      0.59       965\n",
            "\n",
            "    accuracy                           0.58      2500\n",
            "   macro avg       0.59      0.57      0.56      2500\n",
            "weighted avg       0.65      0.58      0.59      2500\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the trained models and tokenizers for prediction\n",
        "loaded_models = {}\n",
        "for model_name in model_configs.keys():\n",
        "    model_save_path = f\"{model_name}_model\"\n",
        "    tokenizer = BertTokenizer.from_pretrained(model_save_path) if model_name == 'BERT' else \\\n",
        "                RobertaTokenizer.from_pretrained(model_save_path) if model_name == 'RoBERTa' else \\\n",
        "                DistilBertTokenizer.from_pretrained(model_save_path) if model_name == 'DistilBERT' else \\\n",
        "                GPT2Tokenizer.from_pretrained(model_save_path) if model_name == 'GPT-2' else \\\n",
        "                BartTokenizer.from_pretrained(model_save_path) if model_name == 'BART' else \\\n",
        "                T5Tokenizer.from_pretrained(model_save_path)\n",
        "    model = BertForSequenceClassification.from_pretrained(model_save_path) if model_name == 'BERT' else \\\n",
        "            RobertaForSequenceClassification.from_pretrained(model_save_path) if model_name == 'RoBERTa' else \\\n",
        "            DistilBertForSequenceClassification.from_pretrained(model_save_path) if model_name == 'DistilBERT' else \\\n",
        "            GPT2ForSequenceClassification.from_pretrained(model_save_path) if model_name == 'GPT-2' else \\\n",
        "            BartForSequenceClassification.from_pretrained(model_save_path) if model_name == 'BART' else \\\n",
        "            T5ForConditionalGeneration.from_pretrained(model_save_path)\n",
        "    loaded_models[model_name] = {'model': model, 'tokenizer': tokenizer}\n",
        "\n",
        "# Ensure id2label mapping\n",
        "id2label = {0: 'negative', 1: 'neutral', 2: 'positive'}\n",
        "\n",
        "# Funktion zur Erstellung einer GenerationConfig für T5\n",
        "def create_generation_config():\n",
        "    return GenerationConfig(\n",
        "        early_stopping=True,\n",
        "        num_beams=4,\n",
        "        no_repeat_ngram_size=3,\n",
        "        forced_bos_token_id=0,\n",
        "        forced_eos_token_id=2\n",
        "    )\n",
        "\n",
        "# Function for making predictions with all models\n",
        "def classify_text(text):\n",
        "    print(f\"Classifying text: {text}\")\n",
        "    predictions = {}\n",
        "\n",
        "    for model_name, model_info in loaded_models.items():\n",
        "        tokenizer = model_info['tokenizer']\n",
        "        model = model_info['model']\n",
        "        inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True, max_length=128).to(device)\n",
        "\n",
        "        model.to(device)\n",
        "        model.eval()\n",
        "        with torch.no_grad():\n",
        "            if model_name == 'T5':\n",
        "                generation_config = create_generation_config()\n",
        "                outputs = model.generate(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], generation_config=generation_config)\n",
        "                prediction = tokenizer.decode(outputs[0], skip_special_tokens=True)\n",
        "                predictions[model_name] = prediction\n",
        "            else:\n",
        "                outputs = model(**inputs)\n",
        "                prediction = torch.argmax(outputs.logits, dim=1).item()\n",
        "                predictions[model_name] = id2label[prediction]\n",
        "\n",
        "    return predictions\n",
        "\n",
        "# Function to retrieve and classify a text based on the given index\n",
        "def get_text(index):\n",
        "    try:\n",
        "        print(f\"Retrieving text for index: {index}\")\n",
        "        index = int(index.split(\":\")[0])\n",
        "        text = test_data.iloc[index]['text']\n",
        "        label = test_data.iloc[index]['label']\n",
        "        print(f\"Text: {text}, Label: {label}\")\n",
        "        return text, label\n",
        "    except Exception as e:\n",
        "        print(f\"Error in get_text: {e}\")\n",
        "        return \"\", \"\"\n",
        "\n",
        "def get_results_for_text(index):\n",
        "    try:\n",
        "        print(f\"Selected index: {index}\")\n",
        "        text, label = get_text(index)\n",
        "        if text == \"\":\n",
        "            return {\"Error\": \"Invalid index or text not found\"}, \"\"\n",
        "        results = classify_text(text)\n",
        "        results['Actual Label'] = label\n",
        "        return results, text\n",
        "    except Exception as e:\n",
        "        print(f\"Error in get_results_for_text: {e}\")\n",
        "        return {\"Error\": f\"An error occurred: {e}\"}, \"\""
      ],
      "metadata": {
        "id": "a0mx28wddZRi",
        "outputId": "619daad3-94ac-4571-84be-03fb09f426e9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Gradio Interface for Text Classification\n",
        "text_picker = gr.Dropdown(\n",
        "    choices=[f\"{i}: {text[:50]}\" for i, text in enumerate(test_data['text'])],\n",
        "    label=\"Select a Text\",\n",
        "    interactive=True\n",
        ")\n",
        "\n",
        "interface = gr.Interface(\n",
        "    fn=get_results_for_text,\n",
        "    inputs=text_picker,\n",
        "    outputs=[gr.Json(label=\"Predictions\"), gr.Textbox(label=\"Selected Text\")],\n",
        "    title=\"Text Classification\"\n",
        ")\n",
        "\n",
        "interface.launch()"
      ],
      "metadata": {
        "id": "UIfSDzj48zNF",
        "outputId": "a5e2fdb1-2001-4862-b408-9130cd1048a7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 645
        }
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Setting queue=True in a Colab notebook requires sharing enabled. Setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
            "\n",
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "Running on public URL: https://34fc861c6f5878d3a9.gradio.live\n",
            "\n",
            "This share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from Terminal to deploy to Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://34fc861c6f5878d3a9.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to retrieve and classify a text based on the given index\n",
        "def get_text(index):\n",
        "    \"\"\"\n",
        "    Retrieves a text and its label from the dataset based on the given index.\n",
        "\n",
        "    Parameters:\n",
        "    index (str): The index of the text in the format 'index:rest_of_string'.\n",
        "\n",
        "    Returns:\n",
        "    tuple: A tuple containing the text and the label.\n",
        "    \"\"\"\n",
        "    try:\n",
        "        print(f\"Retrieving text for index: {index}\")\n",
        "        index = int(index.split(\":\")[0])\n",
        "        text = test_data.iloc[index]['text']\n",
        "        label = test_data.iloc[index]['label']\n",
        "        print(f\"Text: {text}, Label: {label}\")\n",
        "        return text, label\n",
        "    except Exception as e:\n",
        "        print(f\"Error in get_text: {e}\")\n",
        "        return \"\", \"\"\n",
        "\n",
        "def get_results_for_text(index):\n",
        "    \"\"\"\n",
        "    Retrieves and classifies a text based on the given index.\n",
        "\n",
        "    Parameters:\n",
        "    index (str): The index of the text in the format 'index:rest_of_string'.\n",
        "\n",
        "    Returns:\n",
        "    dict: A dictionary with classification results from multiple models and the actual label.\n",
        "    str: The text.\n",
        "    \"\"\"\n",
        "    try:\n",
        "        print(f\"Selected index: {index}\")\n",
        "        text, label = get_text(index)\n",
        "        if text == \"\":\n",
        "            return {\"Error\": \"Invalid index or text not found\"}, \"\"\n",
        "        results = classify_text(text)\n",
        "        results['Actual Label'] = label\n",
        "        return results, text\n",
        "    except Exception as e:\n",
        "        print(f\"Error in get_results_for_text: {e}\")\n",
        "        return {\"Error\": f\"An error occurred: {e}\"}, \"\""
      ],
      "metadata": {
        "id": "Y6rbrcbLh0tP"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "text_picker = gr.Dropdown(\n",
        "    choices=[f\"{i}: {text[:50]}\" for i, text in enumerate(test_data['text'])],\n",
        "    label=\"Select a Text\",\n",
        "    interactive=True\n",
        ")\n",
        "\n",
        "interface = gr.Interface(\n",
        "    fn=get_results_for_text,\n",
        "    inputs=text_picker,\n",
        "    outputs=[gr.Json(label=\"Predictions\"), gr.Textbox(label=\"Selected Text\")],\n",
        "    title=\"Text Classification\"\n",
        ")\n",
        "\n",
        "interface.launch()"
      ],
      "metadata": {
        "id": "hOI5_bgMh5ht",
        "outputId": "5aadc426-8f6e-4d9f-de84-c74a2f844b53",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 645
        }
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Setting queue=True in a Colab notebook requires sharing enabled. Setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
            "\n",
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "Running on public URL: https://b12ba404c6bd45870c.gradio.live\n",
            "\n",
            "This share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from Terminal to deploy to Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://b12ba404c6bd45870c.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1XVfF-hrHA95"
      },
      "source": [
        "## Gradio-Oberfläche erstellen"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 645
        },
        "id": "SizZz2p0HA-F",
        "outputId": "32c6a1dd-4da2-4325-b7c0-dc385abcaee6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Setting queue=True in a Colab notebook requires sharing enabled. Setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
            "\n",
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "Running on public URL: https://5ea4147c4d4508f9c0.gradio.live\n",
            "\n",
            "This share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from Terminal to deploy to Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://5ea4147c4d4508f9c0.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "# Gradio-Oberfläche erstellen\n",
        "def classify_text(text):\n",
        "    results = {}\n",
        "    for model_name, model_info in trained_models.items():\n",
        "        model = model_info['model']\n",
        "        tokenizer = model_info['tokenizer']\n",
        "\n",
        "        inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True, max_length=128).to(device)\n",
        "        if model_name == 'T5':\n",
        "            outputs = model.generate(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], max_length=128)\n",
        "            prediction = tokenizer.decode(outputs[0], skip_special_tokens=True)\n",
        "        else:\n",
        "            outputs = model(**inputs)\n",
        "            prediction = torch.argmax(outputs.logits, dim=1).item()\n",
        "            sentiments = {0: 'negative', 1: 'neutral', 2: 'positive'}\n",
        "            prediction = sentiments[prediction]\n",
        "\n",
        "        results[model_name] = prediction\n",
        "\n",
        "    return results\n",
        "\n",
        "# Satz auswählen und Ergebnisse anzeigen\n",
        "def get_test_sentence(index):\n",
        "    try:\n",
        "        index = int(index.split(\":\")[0])\n",
        "        text = test_data.iloc[index]['text']\n",
        "        original_label = test_data.iloc[index]['sentiment']\n",
        "        return text, original_label\n",
        "    except Exception as e:\n",
        "        print(f\"Error in get_test_sentence: {e}\")\n",
        "        return \"\", \"\"\n",
        "\n",
        "def get_results_for_test_sentence(index):\n",
        "    try:\n",
        "        print(f\"Selected index: {index}\")\n",
        "        text, original_label = get_test_sentence(index)\n",
        "        if text == \"\":\n",
        "            return {\"error\": \"Invalid index or text not found\"}, \"\"\n",
        "        results = classify_text(text)\n",
        "        results['Original Label'] = original_label\n",
        "        return results, text\n",
        "    except Exception as e:\n",
        "        print(f\"Error in get_results_for_test_sentence: {e}\")\n",
        "        return {\"error\": \"An error occurred\"}, \"\"\n",
        "\n",
        "# Gradio-Komponente für den Satz-Picker\n",
        "sentence_picker = gr.Dropdown(\n",
        "    choices=[f\"{i}: {text[:50]}\" for i, text in enumerate(test_data['text'])],\n",
        "    label=\"Wähle einen Satz aus dem Testdatensatz\",\n",
        "    interactive=True\n",
        ")\n",
        "\n",
        "# Gradio-Oberfläche erstellen\n",
        "interface = gr.Interface(\n",
        "    fn=get_results_for_test_sentence,\n",
        "    inputs=sentence_picker,\n",
        "    outputs=[gr.Json(label=\"Ergebnisse\"), gr.Textbox(label=\"Selected Text\")],\n",
        "    title=\"Ergebnisse für einen Satz aus dem Testdatensatz\"\n",
        ")\n",
        "\n",
        "# Starten der Gradio-Oberfläche\n",
        "interface.launch()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "L4",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.13"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}